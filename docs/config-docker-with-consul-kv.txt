
####################################################
# Using the key/value store in Docker engine
#
# https://blog.revolve.team/2017/04/25/deep-dive-into-docker-overlay-networks-part-1/
###################################################

### in each instance:

#### enable firewal on port 7946

systemctl stop docker.service

sudo vim /etc/systemd/system/multi-user.target.wants/docker.service

in the line with ExecStart, add:

	--cluster-store=consul://169.254.1.1:8500 --cluster-advertise=169.254.1.1:2376
	
sudo systemctl daemon-reload
sudo systemctl restart docker.service
sudo systemctl status docker.service


### in admin instance:

sudo docker network create --driver overlay --subnet 192.168.0.0/24 demonet
sudo docker network ls
sudo docker network inspect demonet

### in sinatra instance:

sudo docker run -d --ip 192.168.0.100 --net demonet --name C0 alpine sleep 3600
sudo docker exec C0 ip add sh

# The routing configuration indicates that the default route is via eth1, 
# which means that this interface can be used to access resources outside of the overlay.
# Note that it is possible to create an overlay where containers do not have access to external networks using the --internal flag.
sudo docker exec C0 ip route sh

### in redis instance:

sudo docker run -it --rm --net demonet debian bash
sudo docker run -i -t --net demonet --name alpine alpine /bin/sh

# The type of both interfaces is veth. veth interfaces always always come in pair connected with a virtual wire. 
# The two peered veth can be in different network namespaces which allows traffic to move from one namespace to another. 
# These two veth are used to get outside of the container network namespace.

####################################
# What is a container connected to?
####################################

### in sinatra instance:

1) ethtool

sudo docker exec C0 apk add ethtool
sudo docker exec C0 ip link show
sudo docker exec C0 ethtool -i eth1

2) nsenter

## We can also execute host commands inside the network namespace of a container (even if this container does not have the command).
sudo ls -1 /var/run/docker/netns
C0netns=$(sudo docker inspect C0 -f {{.NetworkSettings.SandboxKey}})
sudo nsenter --net=${C0netns} ip addr show eth0

#  interface indexes associated with the peers of eth0 and eth1:
sudo nsenter --net=${C0netns} ethtool -S eth0
sudo nsenter --net=${C0netns} ethtool -S eth1

# We are now looking for interfaces with indexes 7 and 10. We can first look on the instance itself:
ip link show








